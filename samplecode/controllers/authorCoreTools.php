<?php/*  * To change this license header, choose License Headers in Project Properties. * To change this template file, choose Tools | Templates * and open the template in the editor. */class authorCoreTools{    public function __construct($instance='default'){        if($instance==='default' || strlen($instance)==0){            $instance=$this->guid();        }        $this->versionProperties=array(            'name'      => 'Core Functional Tools',            'version'   =>  2,            'description'=> 'This creates a list of commonly used functions as a local framework.',            'instance'  => $instance,        );    }    /**     * This is a standard guid function, used for years. No need to rewrite.     * All I have done to it is to remove the {} symbols since this guid is not     * being represented as a JSON object, but instead will double as the instance     * ID and the record id. This is the stub that would allow for guaranteed     * delivery since the promise can be tracked to the execution log directly     * by the id.     *     * @author http://php.net/manual/en/function.com-create-guid.php#52354     * @return string     */    public function guid(){        $result = '';        if (function_exists('com_create_guid')){            $result = com_create_guid();        }else{            mt_srand((double)microtime()*10000);//optional for php 4.2.0 and up.            $charid = strtoupper(md5(uniqid(rand(), true)));            $hyphen = chr(45);// "-"            $uuid = chr(123)// "{"                    .substr($charid, 0, 8).$hyphen                    .substr($charid, 8, 4).$hyphen                    .substr($charid,12, 4).$hyphen                    .substr($charid,16, 4).$hyphen                    .substr($charid,20,12)                    .chr(125);// "}"            $result = rtrim(ltrim($uuid, "{"),"}");        }        return $result;    }    /**     * This will attempt to identify and parse the parameters of the subscriber     * into data elements that can be validated by the service.     *     * @author Jasen Ward <jasenward@gmail.com>     * @return array     */    function parseData(){        //Collect Subscriber Data        $result=array();        //Is data in POST        $test=$this->is_json($_POST);        if(!$test){            $this->dataType='POST';            foreach ($_POST as $key => $value){                $result[$key]=$value;            }        }else{            $this->dataType='JSON';            $result=$test;        }        //Is data in GET        if(count($result)==0){            $this->dataType='GET';            foreach ($_GET as $key => $value){                $result[htmlspecialchars($key)] = htmlspecialchars($value);            }        }        //Is this JSON Encoded file input        if(count($result)==0){            $this->dataType='FILE';            $result=json_decode(file_get_contents('php://input'), true);        }        return $result;    }    /**     * Quick and dirty test of a json string submission     * @author Jasen Ward, <jasenward@gmail.com>     * @param type $str     * @return boolean     */    function is_json($str){        // decode the JSON data        // set second parameter boolean TRUE for associative array output.        $result = is_string($str)                    && is_array(json_decode($str, true))                    && (json_last_error() == JSON_ERROR_NONE);        if ($result) {            // JSON is valid        }elseif(gettype($str)=='array'){            //Due to oddities with PHP/Angular is the POST Array Key a JSON string?            foreach ($str as $key => $value){                $angularJSON = json_decode($key);                //restore escapted periods.                $result['bRef']=str_replace("_",".",$angularJSON->bRef);            }        }else{            // JSON error encountered            $result=false;        }        return $result;    }}